<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-4.2.xsd">

	<sec:http auto-config="false" pattern="/system/**">
		<sec:intercept-url pattern="/system/login-window.htm"
			access="permitAll" />
		<sec:intercept-url pattern="${system.login.page.url}"
			access="permitAll" />
		<sec:intercept-url pattern="/system/druid/**"
			access="hasRole('SYS_ADMIN')" />
		<sec:intercept-url pattern="/system/mr" access="hasRole('SYS_ADMIN')" />
		<sec:intercept-url pattern="/system/**" access="hasRole('USER')" />
		<sec:form-login login-page="${system.login.page.url}"
			login-processing-url="${system.login.processing.url}"
			username-parameter="${system.login.form.parameter.username}" 
			password-parameter="${system.login.form.parameter.password}"
			authentication-failure-url="${system.login.page.url}?error=1"
			default-target-url="${system.login.default.target.url}" always-use-default-target="true" />
		<sec:logout logout-url="${system.logout.url}" logout-success-url="${system.login.page.url}?logout=true" />
		<sec:session-management
			session-fixation-protection="newSession">
			<sec:concurrency-control max-sessions="20" />
		</sec:session-management>
		<sec:access-denied-handler ref="systemAccessDeniedHandler"/>
		<sec:remember-me key="${system.remember.me.keyname}" services-ref="systemRememberMeServices" />
		<!-- token 免密码登录方式设置，慎用 -->
		<sec:custom-filter before="PRE_AUTH_FILTER" ref="systemAccessTokenLoginFilter" />
		<sec:custom-filter before="FORM_LOGIN_FILTER" ref="validateCodeCheckFilter" /> 
		<!-- 注意：logout 配置 在csrf开启的时候必须是POST方式提交并带有token 才能正常注销-->
		<sec:csrf disabled="false" request-matcher-ref="notNeedCsrfProtectedUrlsRequestMatcher" />
<!-- 		<sec:csrf disabled="false" /> -->
		<sec:headers>
			<sec:frame-options policy="SAMEORIGIN"/>
		</sec:headers>
	</sec:http>
	
	<!-- 对于多登录端的程序，多个端的用户互相访问会出现 403错误，不够友好，因此，使用自定义跳转到登录页面更符合实际 -->
	<bean id="systemAccessDeniedHandler" class="com.sunnsoft.sloa.auth.DefaultAccessDeniedHandler">
		<property name="loginPageUrl" value="${system.login.page.url}"></property>
	</bean>

	<!-- 添加不需要csrf 保护的url ,例如上传文件-->
	<bean id="notNeedCsrfProtectedUrlsRequestMatcher" class="com.sunnsoft.security.csrf.NotNeedCsrfProtectedUrlsRequestMatcher">
		<property name="notNeedCsrfProtectedUrls">
			<list>
<!-- 				 添加不需要csrf 保护的url 例如文件上传（csrf保护下文件上传的时候如果不在这里进行设置的话，需要在上传Url后加参数例如<form action="upload-url?${_csrf.parameterName}=${_csrf.token}" 但有泄密风险）等 -->
				<value>/system/**/*upload.htm</value>
			</list>
		</property>
	</bean>

	<bean id="loggerListener"
		class="org.springframework.security.authentication.event.LoggerListener" />

	<sec:authentication-manager alias="authenticationManager"
		erase-credentials="false">
		<sec:authentication-provider
			user-service-ref="systemUserDetailsService">
			<sec:password-encoder ref="passwordEncoder">
			</sec:password-encoder>
		</sec:authentication-provider>
		<!-- token 免密码登录方式设置，默认关闭 -->
		<sec:authentication-provider ref="accessTokenAuthenticationProvider" />
	</sec:authentication-manager>

	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
	</bean>

	<bean id="systemUserDetailsService" class="com.sunnsoft.sloa.auth.SystemUserDetailsService">
		<constructor-arg name="userService" ref="userService" />
	</bean>
	
	<bean id="validateCodeCheckFilter" class="com.sunnsoft.servlet.filter.ValidateCodeCheckFilter">
		<property name="formLoginUrl" value="${system.login.processing.url}"></property>
		<property name="failRedirectUrl" value="${system.login.page.url}?error=2"></property>
	</bean>

	<bean id="tokenRepository"
		class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="systemRememberMeServices"
		class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
		<constructor-arg name="userDetailsService" ref="systemUserDetailsService" />
		<constructor-arg name="key" value="${system.remember.me.keyname}" />
		<constructor-arg name="tokenRepository" ref="tokenRepository" />
		<property name="tokenValiditySeconds" value="${system.remember.me.token.validate.seconds}" />
		<property name="parameter" value="${system.remember.me.parameter.name}" />
		<property name="cookieName" value="${system.remember.me.cookie.name}" />
	</bean>

	<!-- 以下是token 免密码方式登录，默认关闭，如需要开启，请将下列配置开启。先在数据库用户表字段access_token和access_token_expire设置token和token过期时间 ，然后只需要在Url上带上_access_token参数就可以登录，无需输入密码，但需要注意此方法的登录风险,请谨慎使用！！！！
		登录一次之后_access_token会被清除，如果需要再次使用token方式，需要设置新的token. 
		要结合其他登录验证方式，请参照如下配置中的实现类进行配置，并增加authentication-provider到authentication-manager
		!!!!!access_token要64个字符串以上才更安全，而且要注意是否重复问题，请应用程序自行设置!!!!!!
		另外，如果需要免密方式登录并使用remember me功能，需要提交参数里加上remember_me=true（remember me参数名请参考${system.remember.me.parameter.name}）
		-->
	<bean id="systemOnlyOnceTokenUserDetailsService" class="com.sunnsoft.sloa.auth.OnlyOnceTokenUserDetailsService" >
	</bean>
	
	<bean id="systemLongPeriodTokenUserDetailsService" class="com.sunnsoft.sloa.auth.LongPeriodTokenUserDetailsService" >
		<property name="tokenValiditySeconds" value="${system.remember.me.token.validate.seconds}"></property>
	</bean>
	
	<bean id="systemAccessTokenServices" class="com.sunnsoft.sloa.auth.AccessTokenServices">
		<constructor-arg name="tokenUserDetailsService" ref="systemOnlyOnceTokenUserDetailsService" />
		<constructor-arg name="tokenName" value="${system.access.token.parameter.name}" />
		<property name="checkFromHeader" value="true"></property>
		<property name="checkFromRequestParameter" value="true"></property>
	</bean>
	
	<bean id="systemAccessTokenLoginFilter" class="com.sunnsoft.sloa.auth.AccessTokenLoginFilter">
		<constructor-arg name="accessTokenServices" ref="systemAccessTokenServices" />
		<constructor-arg name="authenticationManager" ref="authenticationManager" />
		<property name="rememberMeServices" ref="systemRememberMeServices"></property>
	</bean>
	
	<bean id="accessTokenAuthenticationProvider" class="com.sunnsoft.sloa.auth.AccessTokenAuthenticationProvider"></bean>
	<!-- token登录方式 配置结束 -->

</beans>


